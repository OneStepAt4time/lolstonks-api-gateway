name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -e ".[dev]"
        pip install -e ".[docs]"

    - name: Lint with ruff
      run: |
        ruff check --output-format=github .
        ruff format --check .

    - name: Type checking
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports || true

    - name: Test with pytest
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        RIOT_API_KEY: test-key-for-testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test documentation build
      run: |
        python scripts/generate_api_docs.py
        mkdocs build --strict

    - name: Check API documentation generation
      run: |
        # Verify API docs can be generated from OpenAPI
        python -c "
        import asyncio
        import json
        from pathlib import Path
        from app.main import app

        async def test_openapi():
            openapi_schema = app.openapi()
            assert 'paths' in openapi_schema
            assert 'components' in openapi_schema
            print('OpenAPI schema validation passed')

        asyncio.run(test_openapi())
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install bandit safety
        pip install -e ".[dev]"

    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt

    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json