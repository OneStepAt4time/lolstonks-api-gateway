name: Deploy Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Cache MkDocs build
      uses: actions/cache@v4
      with:
        path: .cache
        key: mkdocs-${{ hashFiles('mkdocs.yml') }}-${{ hashFiles('docs/**') }}
        restore-keys: |
          mkdocs-${{ hashFiles('mkdocs.yml') }}-
          mkdocs-

    - name: Install dependencies
      run: |
        uv sync --extra docs

    - name: Export OpenAPI schema
      env:
        REDIS_HOST: ${{ secrets.REDIS_HOST || 'localhost' }}
        REDIS_PORT: ${{ secrets.REDIS_PORT || '6379' }}
        RIOT_API_KEY: ${{ secrets.RIOT_API_KEY || 'RGAPI-test-key-for-testing' }}
      run: |
        uv run python scripts/export_openapi.py

    - name: Configure MkDocs
      run: |
        # Update repo URL in mkdocs.yml for deployment
        sed -i "s|repo_url: https://github.com/yourusername/lolstonks-api-gateway|repo_url: https://github.com/${{ github.repository }}|" mkdocs.yml

    - name: Build documentation
      run: |
        uv run mkdocs build --verbose
      continue-on-error: false

    - name: Verify build output
      run: |
        echo "Checking build output..."
        if [ ! -d "site" ]; then
          echo "Error: site directory not found!"
          exit 1
        fi
        echo "Build successful - found $(find site -type f | wc -l) files"

    - name: Build with review changes
      if: github.event_name == 'pull_request'
      run: |
        echo "Building documentation preview for PR"
        uv run mkdocs build --verbose

    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4

    - name: Generate build report
      if: always()
      run: |
        echo "## Documentation Build Report" > build-report.md
        echo "" >> build-report.md
        echo "- **Branch:** ${{ github.ref_name }}" >> build-report.md
        echo "- **Commit:** ${{ github.sha }}" >> build-report.md
        echo "- **Files generated:** $(find site -type f | wc -l)" >> build-report.md
        echo "- **Total size:** $(du -sh site | cut -f1)" >> build-report.md
        echo "- **Build time:** $(date)" >> build-report.md
        cat build-report.md

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: ./site

  deploy:
    environment:
      name: pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Lint documentation
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra docs

    - name: Lint Markdown files
      run: |
        echo "Checking Markdown files structure..."
        MD_COUNT=$(find docs -name "*.md" -type f | wc -l)
        echo "Found $MD_COUNT Markdown files"

        # Check for empty files
        echo "Checking for empty Markdown files..."
        find docs -name "*.md" -type f -empty && echo "Warning: Found empty files" || echo "No empty files found"

        # Check for common issues
        echo "Checking for common Markdown issues..."
        grep -r "TODO\|FIXME\|XXX" docs/**/*.md && echo "Warning: Found TODO/FIXME markers" || echo "No TODO markers found"

    - name: Validate MkDocs configuration
      run: |
        echo "MkDocs version:"
        uv run mkdocs --version

        echo "Validating mkdocs.yml..."
        uv run python -c "import yaml; yaml.safe_load(open('mkdocs.yml'))" && echo "✓ mkdocs.yml is valid YAML"

        echo "Building documentation..."
        uv run mkdocs build --verbose

    - name: Check documentation structure
      run: |
        echo "Verifying documentation structure..."

        # Check required files exist
        REQUIRED_FILES=("docs/index.md" "docs/api/overview.md" "mkdocs.yml")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ Found: $file"
          else
            echo "✗ Missing: $file"
            exit 1
          fi
        done

        echo "All required files present"
